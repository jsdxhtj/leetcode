题目：从排序数组中删除重复项
给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
示例 1:
给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 
你不需要考虑数组中超出新长度后面的元素。
示例 2:
给定 nums = [0,0,1,1,1,2,2,3,3,4],
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
你不需要考虑数组中超出新长度后面的元素。

算法思路：
由于数组是已经排序的，所以判断一个元素是否是新元素，只需要将其与结果数组中的最后一个元素进行比较即可，具体步骤如下：
1、初始化结果数组索引index:newLength
2、迭代取数组的元素
3、如果当前位置的元素与结果数组索引不等，说明出现了新的元素，索引自动加1，并且该位置索引重新赋值
4、index+1即为结果数组长度
index始终获取的是结果数组的最后一个元素

class Solution {
    public int removeDuplicates(int[] nums) {
        int newLength = 0;
        for(int i=0; i< nums.length; i++){
            if(nums[i] != nums[newLength]){
                newLength++;
                nums[newLength] = nums[i];                
            }                         
        }  
        return newLength+1;
    }
}

可能出现错误的点：
1、题目中要求返回结果数组的大小，而newLength是最后一个索引，应该要+1
2、由于数组是排序的，在比较中也可以用==，但是要注意在数组的最后一个元素如果是新元素会被忽略，应该增加判断如下：
